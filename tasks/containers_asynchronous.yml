---

- name: Setup docker containers asynchronously
  block:
    - name: Launch asynchronous docker containers deploy
      community.docker.docker_container:
        name: "{{ container.name }}"
        image: "{{ container.image }}"
        privileged: >-
          {{ container.privileged
             | default(docker_provisioner_container_privileged) }}
        state: >-
          {{ container.state
             | default(docker_provisioner_container_state) }}
        recreate: >-
          {{ container.recreate
             | default(docker_provisioner_container_recreate) }}
        force_kill: >-
          {{ container.force_kill
             | default(docker_provisioner_container_force_kill) }}
        restart: >-
          {{ container.restart
             | default(docker_provisioner_container_restart) }}
        tls: >-
          {{ container.tls
             | default(docker_provisioner_container_tls) }}
        tls_hostname: >-
          {{ container.tls_hostname
             | default(docker_provisioner_container_tls_hostname) }}
        stop_timeout: >-
          {{ container.stop_timeout
             | default(docker_provisioner_container_stop_timeout) }}
        tty: >-
          {{ container.tty
             | default(docker_provisioner_container_tty) }}
        networks: >-
          {{ container.networks
             | default(docker_provisioner_container_networks)
             | default(omit) }}
        networks_cli_compatible: yes
        exposed_ports: >-
          {{ container.exposed_ports
             | default(docker_provisioner_container_exposed_ports) }}
        published_ports: >-
          {{ container.published_ports
             | default(docker_provisioner_container_published_ports) }}
        command: >-
          {{ container.command
             | default(docker_provisioner_container_command) }}
        command_handling: >-
          {{ container.command_handling
             | default(docker_provisioner_container_command_handling) }}
        env: >-
          {{ container.env
             | default(docker_provisioner_container_env) }}
        labels: >-
          {{ container.labels
             | default(docker_provisioner_container_labels) }}
        links: >-
          {{ container.links
             | default(docker_provisioner_container_links) }}
        volumes: >-
          {{ container.volumes
             | default(docker_provisioner_container_volumes) }}
        container_default_behavior: >-
          {{ container.default_behavior
             | default(docker_provisioner_container_default_behavior) }}
      loop: "{{ docker_provisioner_containers }}"
      register: docker_provisioner_containers_async_result
      loop_control:
        label: >-
          {{ container.name
             + " "
             + container.state | default(docker_provisioner_container_state) }}
        loop_var: container
      async: "{{ docker_provisioner_async }}"
      poll: 0
      changed_when: no
      vars:
        docker_provisioner_async: >-
          {{ container.max_provisioning_time
             | default(docker_provisioner_container_max_provisioning_time) }}

    - name: Check asynchronous docker containers deploy
      ansible.builtin.async_status:
        jid: "{{ async_result_item.ansible_job_id }}"
      loop: "{{ docker_provisioner_containers_async_result.results }}"
      loop_control:
        label: >-
          {{ async_result_item.container.name
             + " "
             + async_result_item.container.state
               | default(docker_provisioner_container_state) }}
        loop_var: async_result_item
      register: docker_provisioner_containers_deploy_result
      until: docker_provisioner_containers_deploy_result.finished
      retries: "{{ docker_provisioner_retries }}"
      delay: 1
      vars:
        docker_provisioner_retries: >-
          {{ async_result_item.container.max_provisioning_time
             | default(docker_provisioner_container_max_provisioning_time) }}
  tags:
    - role::docker_provisioner
    - role::docker_provisioner::containers
