---
# Setup docker images asynchronously

- block:
    - name: Launch asynchronous docker image deploy
      docker_image:
        name: "{{ image.name }}"
        build: "{{ docker_provisioner_image_build }}"
        force_source: >-
          {{ image.force
             | default(docker_provisioner_image_force) }}
        repository: >-
          {{ image.repository
             | default(docker_provisioner_image_repository) }}
        timeout: >-
          {{ image.timeout
             | default(docker_provisioner_image_timeout) }}
        source: >-
            {{ image.source
               | default(docker_provisioner_image_source) }}
        state: >-
          {{ image.state
             | default(docker_provisioner_image_state) }}
      loop: "{{ docker_provisioner_images }}"
      register: docker_provisioner_images_async_result
      loop_control:
        label: "{{ image.name }}"
        loop_var: image
      async: >-
        {{ image.max_provisioning_time
           | default(docker_provisioner_image_max_provisioning_time) }}
      poll: 0
      changed_when: no

    - name: Check asynchronous docker image deploy
      async_status:
        jid: "{{ async_result_item.ansible_job_id }}"
      loop: "{{ docker_provisioner_images_async_result.results }}"
      loop_control:
        label: "{{ async_result_item.image.name }}"
        loop_var: async_result_item
      register: docker_provisioner_images_async_poll_results
      until: docker_provisioner_images_async_poll_results.finished
      retries: >-
        {{ async_result_item.image.max_provisioning_time
           | default(docker_provisioner_image_max_provisioning_time) }}
      delay: 1
  tags:
    - role::docker_provisioner
    - role::docker_provisioner::images
